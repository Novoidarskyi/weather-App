{"version":3,"sources":["components/DetailICityWeatherCard/DetailICityWeatherCard.module.css","components/ListCardCityWeather/CardCityWeather/CardCityWeather.module.css","components/FormFindCity/FormFindCity.module.css","css/common.module.css","components/ListCardCityWeather/ListCardCityWeather.module.css","api/api.js","redux/cityWeather/cityWeather-operations.js","redux/cityWeather/cityWeather-selectors.js","hooks/useLocalStorage.js","components/FormFindCity/FormFindCity.jsx","redux/cityWeather/cityWeather-actions.js","components/ListCardCityWeather/CardCityWeather/CardCityWeather.jsx","components/ListCardCityWeather/ListCardCityWeather.jsx","views/HomeView.js","components/DetailICityWeatherCard/DetailICityWeatherCard.jsx","components/ChartTemperature/ChartTemperature.jsx","components/GoBackButton/GoBackButton.jsx","views/DetailWeatherView.js","App.js","redux/cityWeather/cityWeather-reducer.js","redux/store.js","index.js"],"names":["module","exports","BASE_URL","API_KEY","fetchCity","cityName","fetch","then","response","ok","json","Promise","reject","Error","fetchByLocalStorage","arrayOfCities","a","arrayOfPromises","map","all","arrayOfWeather","fetchOneCityWeather","createAsyncThunk","data","rejectWithValue","citiesWeather","message","fetchUpdateWeatherOneCity","name","cityWeather","fetchCityWeatherFromLocalStorage","citiesWeatherArray","state","entities","isLoading","useLocalStorage","key","defaultValue","useState","JSON","parse","window","localStorage","getItem","setState","useEffect","setItem","stringify","FormFindCity","onSubmit","setCityName","normalizeCityName","slice","toUpperCase","className","css","searchbar","searchForm","event","preventDefault","trim","toast","info","searchFormInput","type","autoFocus","value","placeholder","onChange","currentTarget","searchFormButton","remove","createAction","CardCityWeather","id","temp","feelsLike","windSpeed","description","dispatch","useDispatch","to","title","item_text","button_wrapper","Button","variant","sx","color","mr","border","onClick","ListCardCityWeather","useSelector","length","listCard","main","wind","weather","item","feels_like","speed","HomeView","loading","cityFromLocalStorage","city","autoClose","newCityName","includes","warning","size","s","container","DetailWeatherCity","visibility","deg","humidity","pressure","temp_max","temp_min","windDir","list","ChartTemp","lineChartData","labels","reduce","acc","_","index","String","push","datasets","borderColor","fill","label","lineTension","pointBorderColor","pointBackgroundColor","pointRadius","pointHoverRadius","pointBorderWidth","width","height","options","responsive","plugins","legend","display","position","text","font","scales","xAxis","ticks","grid","yAxis","GoBackButton","navigate","useNavigate","top","left","setTemp","visible","setVisible","weatherCitiesFromRedux","allCitiesWeather","setAllCitiesWeather","cityId","useParams","console","log","catch","error","find","Number","detailTemp","coord","lat","lon","fetchTemperature","tempOfDayArray","hourly","wrapper","DetailICityWeatherCard","mt","ChartTemperature","App","exact","path","element","DetailWeatherView","createReducer","fulfilled","payload","filter","pending","rejected","combineReducers","store","configureStore","reducer","citiesWeatherReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30a56847.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"DetailICityWeatherCard_title__3MPQJ\",\"list\":\"DetailICityWeatherCard_list__2wciH\",\"item_text\":\"DetailICityWeatherCard_item_text__3j0rG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"CardCityWeather_title__kahvI\",\"item_text\":\"CardCityWeather_item_text__EodP-\",\"button_wrapper\":\"CardCityWeather_button_wrapper__3go6j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar\":\"FormFindCity_searchbar__swGsl\",\"searchForm\":\"FormFindCity_searchForm__1ADHz\",\"searchFormInput\":\"FormFindCity_searchFormInput__32Ogo\",\"searchFormButton\":\"FormFindCity_searchFormButton__1Cv2a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"common_container__2UY_k\",\"wrapper\":\"common_wrapper__2o607\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listCard\":\"ListCardCityWeather_listCard__yMZ8W\",\"item\":\"ListCardCityWeather_item__veLsP\"};","const BASE_URL =\r\n  'https://api.openweathermap.org/data/2.5/weather?units=metric&lang=ru&';\r\nconst TEMP_URL =\r\n  'httpss://api.openweathermap.org/data/2.5/onecall?units=metric&exclude=current,minutely,daily,alerts&';\r\nconst ID_URL =\r\n  'https://api.openweathermap.org/data/2.5/weather?units=metric&lang=ru&';\r\nconst API_KEY = 'c16e47f23c97143fbd5f7a2cbadb0b2f';\r\n\r\n// Запрос о состоянии погоды в городе по названию\r\n\r\nconst fetchCity = cityName =>\r\n  fetch(`${BASE_URL}q=${cityName}&appid=${API_KEY}`).then(response => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(`Город с название ${cityName} не найден`));\r\n  });\r\n\r\n// Запрос о состоянии погоды в городе по ID\r\n\r\nconst fetchCityById = id =>\r\n  fetch(`${ID_URL}id=${id}&appid=${API_KEY}`).then(response => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(\r\n      new Error('Подробная информация о погоде не найдена'),\r\n    );\r\n  });\r\n\r\n// Запрос о состоянии погоды в город(ах) сохраненных в localStorage\r\n\r\nconst fetchByLocalStorage = async arrayOfCities => {\r\n  const arrayOfPromises = arrayOfCities.map(async cityName => {\r\n    const response = await fetch(`${BASE_URL}q=${cityName}&appid=${API_KEY}`);\r\n    return response.json();\r\n  });\r\n\r\n  const arrayOfWeather = await Promise.all(arrayOfPromises);\r\n  return arrayOfWeather;\r\n};\r\n\r\n// Запрос почасовых показателей температуры\r\n\r\nconst fetchTemperature = (lat, lon) =>\r\n  fetch(`${TEMP_URL}lat=${lat}&lon=${lon}&appid=${API_KEY}`).then(response => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(`Данные о температуре не найдены`));\r\n  });\r\n\r\nexport { fetchCity, fetchByLocalStorage, fetchTemperature, fetchCityById };\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { fetchCity, fetchByLocalStorage } from 'api/api';\r\n\r\n// Запрос о состоянии погоды в городе по названию\r\n\r\nexport const fetchOneCityWeather = createAsyncThunk(\r\n  'cityWeather/fetchCityWeather',\r\n  async (data, { rejectWithValue }) => {\r\n    try {\r\n      const citiesWeather = await fetchCity(data);\r\n      return citiesWeather;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  },\r\n);\r\n\r\n// Обновление состояния погоды одного города\r\n\r\nexport const fetchUpdateWeatherOneCity = createAsyncThunk(\r\n  'cityWeather/updateWeatherOneCity',\r\n  async name => {\r\n    const cityWeather = await fetchCity(name);\r\n    return cityWeather;\r\n  },\r\n);\r\n\r\n// Запрос о состоянии погоды в город(е/ах) сохраненных в localStorage\r\n\r\nexport const fetchCityWeatherFromLocalStorage = createAsyncThunk(\r\n  'cityWeather/fetchByLocalStorage',\r\n  async data => {\r\n    const citiesWeather = await fetchByLocalStorage(data);\r\n    return citiesWeather;\r\n  },\r\n);\r\n","export const citiesWeatherArray = state => state.citiesWeather.entities;\r\nexport const isLoading = state => state.citiesWeather.isLoading;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst useLocalStorage = (key, defaultValue) => {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(key)) || defaultValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport PropTypes from 'prop-types';\r\nimport css from './FormFindCity.module.css';\r\n\r\nfunction FormFindCity({ onSubmit }) {\r\n  const [cityName, setCityName] = useState(\"\");\r\n\r\n  const handleCityChange = event => { \r\n    setCityName(event.currentTarget.value)\r\n  }\r\n\r\n  const normalizeCityName = cityName.slice(0, 1).toUpperCase() + cityName.slice(1)\r\n const handleSubmit = event => { \r\n    event.preventDefault()\r\n    if (cityName.trim() === \"\") {\r\n      toast.info(\"Введите название города\")\r\n      return\r\n     } \r\n    \r\n      onSubmit(normalizeCityName)\r\n    setCityName(\"\")\r\n  }\r\n \r\n    return (\r\n      <header className={css.searchbar}>\r\n      <form className={css.searchForm}  onSubmit={handleSubmit}>    \r\n        <input className={css.searchFormInput} \r\n          type=\"text\"\r\n          name=\"cityName\"          \r\n          autoFocus\r\n          value={cityName}\r\n          placeholder = \"Введите название города\"\r\n          onChange={handleCityChange}        \r\n          />   \r\n        <button type = \"submit\" className={css.searchFormButton}>\r\n        Добавить город\r\n        </button>  \r\n</form>\r\n</header>\r\n    );\r\n  \r\n}\r\n\r\nexport default FormFindCity\r\n\r\nFormFindCity.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired\r\n}","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const remove = createAction('cityWeather/remove');\r\n","import { NavLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport Button from '@mui/material/Button';\r\nimport { fetchUpdateWeatherOneCity } from 'redux/cityWeather/cityWeather-operations';\r\nimport { remove } from 'redux/cityWeather/cityWeather-actions';\r\nimport css from './CardCityWeather.module.css';\r\n\r\nfunction CardCityWeather({\r\n  id,\r\n  name,\r\n  temp,\r\n  feelsLike,\r\n  windSpeed,\r\n  description,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div>\r\n      <NavLink to={`${id}`}>\r\n        <h2 className={css.title}>{name}</h2>\r\n        <p className={css.item_text}>Температура: {temp} °C</p>\r\n        <p className={css.item_text}>Ощущается как: {feelsLike} °C</p>\r\n        <p className={css.item_text}>Ветер: {windSpeed} м/с</p>\r\n        <p className={css.item_text}>Состояние погоды: {description}</p>\r\n      </NavLink>\r\n      <div className={css.button_wrapper}>\r\n        <Button\r\n          variant=\"outlined\"\r\n          type=\"button\"\r\n          sx={{\r\n            color: 'white',\r\n            mr: '25px',\r\n            border: '1px solid white',\r\n          }}\r\n          onClick={() => dispatch(fetchUpdateWeatherOneCity(name))}\r\n        >\r\n          Обновить\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          type=\"button\"\r\n          sx={{\r\n            color: 'white',\r\n            border: '1px solid white',\r\n          }}\r\n          onClick={() => dispatch(remove(id))}\r\n        >\r\n          Удалить\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardCityWeather;\r\n\r\nCardCityWeather.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  temp: PropTypes.number.isRequired,\r\n  feelsLike: PropTypes.number.isRequired,\r\n  windSpeed: PropTypes.number.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n};\r\n","import { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {citiesWeatherArray} from \"redux/cityWeather/cityWeather-selectors\"\r\nimport CardCityWeather from './CardCityWeather';\r\nimport css from './ListCardCityWeather.module.css';\r\n\r\n\r\nfunction ListCardCityWeather(){\r\nconst cityWeather = useSelector(citiesWeatherArray)\r\n \r\n  return (\r\n    cityWeather.length > 0 && (<ul className={css.listCard}>\r\n      {cityWeather.map(({ id, name, main, wind, weather }) => (\r\n        <li key={id} className={css.item}>          \r\n          <CardCityWeather\r\n            id={id}\r\n            name={name}\r\n            temp={main.temp}\r\n            feelsLike={main.feels_like}\r\n            windSpeed={wind.speed}\r\n            description={weather[0].description}       \r\n            />            \r\n        </li>\r\n      ))}\r\n    </ul>)\r\n  );\r\n}\r\n\r\nexport default ListCardCityWeather;\r\n\r\n\r\nListCardCityWeather.propTypes = {\r\n  id: PropTypes.number,\r\n  name: PropTypes.string,\r\n  main: PropTypes.object,\r\n  wind: PropTypes.object,\r\n  weather: PropTypes.array,  \r\n}","import { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport CircleLoader from 'react-spinners/CircleLoader';\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  fetchOneCityWeather,\r\n  fetchCityWeatherFromLocalStorage,\r\n} from 'redux/cityWeather/cityWeather-operations';\r\nimport {\r\n  citiesWeatherArray,\r\n  isLoading,\r\n} from 'redux/cityWeather/cityWeather-selectors';\r\nimport useLocalStorage from 'hooks/useLocalStorage';\r\nimport FormFindCity from 'components/FormFindCity';\r\nimport ListCardCityWeather from 'components/ListCardCityWeather';\r\nimport s from '../css/common.module.css';\r\n\r\nfunction HomeView() {\r\n  const [cityName, setCityName] = useLocalStorage('cities', []);\r\n  const cityWeather = useSelector(citiesWeatherArray);\r\n  const loading = useSelector(isLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  //Обновление state по списку городов из LocalStorage\r\n  useEffect(() => {\r\n    const cityFromLocalStorage = JSON.parse(\r\n      window.localStorage.getItem('cities'),\r\n    );\r\n    if (cityFromLocalStorage.length !== 0) {\r\n      dispatch(fetchCityWeatherFromLocalStorage(cityFromLocalStorage));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  //Обновление state городов при добавлениии нового города\r\n  useEffect(() => {\r\n    setCityName(cityWeather.map(city => city.name));\r\n  }, [cityWeather, setCityName]);\r\n\r\n  // Запрос о состоянии погоды в городе при Submit формы\r\n\r\n  const handleFormSubmit = newCityName => {\r\n    if (cityName.includes(newCityName)) {\r\n      return toast.warning(\r\n        'Информация о погоде данного города уже предоставлена на странице',\r\n      );\r\n    }\r\n    dispatch(fetchOneCityWeather(newCityName));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer autoClose={1500} />\r\n      <FormFindCity onSubmit={handleFormSubmit} />\r\n      {loading && (\r\n        <CircleLoader\r\n          color=\"white\"\r\n          size={150}\r\n          css={`\r\n            position: fixed;\r\n            top: 50%;\r\n            left: 50%;\r\n          `}\r\n        />\r\n      )}\r\n      <div className={s.container}>\r\n        <ListCardCityWeather />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HomeView;\r\n","import PropTypes from 'prop-types';\r\nimport css from './DetailICityWeatherCard.module.css';\r\n\r\nconst windDirection = data => {\r\n  if (data === 360) {\r\n    return 'северный';\r\n  } else if (0 <= data && data < 90) {\r\n    return 'северо-восточный';\r\n  } else if (data === 90) {\r\n    return 'восточный';\r\n  } else if (90 <= data && data < 180) {\r\n    return 'юго-восточный';\r\n  } else if (data === 180) {\r\n    return 'южный';\r\n  } else if (180 <= data && data < 270) {\r\n    return 'юго-западный';\r\n  } else if (data === 270) {\r\n    return 'западный';\r\n  } else if (270 <= data && data < 360) {\r\n    return 'северо-западный';\r\n  }\r\n};\r\n\r\nfunction DetailWeatherCity({ city }) {\r\n  const {\r\n    name,\r\n    visibility,\r\n    weather,\r\n    wind: { speed, deg },\r\n    main: { temp, feels_like, humidity, pressure, temp_max, temp_min },\r\n  } = city;\r\n  \r\n  const windDir = windDirection(deg);\r\n  \r\n  return (\r\n    <div>\r\n      <h2 className={css.title}>{name}</h2>\r\n      <ul className={css.list}>\r\n      <li className={css.item_text}>Температура: {temp} °C</li>\r\n      <li className={css.item_text}>Ощущается как: {feels_like} °C</li>\r\n      <li className={css.item_text}>Ветер: {speed} м/с ({windDir})</li>\r\n      <li className={css.item_text}>Влажность: {humidity}%</li>\r\n      <li className={css.item_text}>Давление: {pressure} мм рт. ст.</li>\r\n      <li className={css.item_text}>Видимость: {visibility} м</li>\r\n            <li className={css.item_text}>Максимальная температура: {temp_max} °C</li>\r\n      <li className={css.item_text}>Минимальная температура: {temp_min} °C</li>\r\n      <li className={css.item_text}>Состояние погоды: {weather[0].description}</li>\r\n    </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DetailWeatherCity;\r\n\r\nDetailWeatherCity.propTypes = {\r\n  city: PropTypes.object.isRequired\r\n}\r\n\r\n","import { Chart } from 'chart.js/auto';\r\nimport { Line } from 'react-chartjs-2';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ChartTemp = ({ value }) => {\r\n  // Формирование массива значений часов для подписи горизонтальной оси графика\r\n\r\n  const hours = value.reduce((acc, _, index) => {\r\n    if (String(index).length === 2) {\r\n      acc.push(`${index}:00`);\r\n    } else {\r\n      acc.push(`0${index}:00`);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  // Формирование массива значений температур для отрисовки графика\r\n\r\n  const dataTemp = value.map(item => item.temp);\r\n\r\n  const lineChartData = {\r\n    labels: hours,\r\n    datasets: [\r\n      {\r\n        data: dataTemp,\r\n        borderColor: 'white',\r\n        fill: false,\r\n        label: 't°C',\r\n        lineTension: 0.5,\r\n        pointBorderColor: 'white',\r\n        pointBackgroundColor: 'grey',\r\n        pointRadius: 7,\r\n        pointHoverRadius: 15,\r\n        pointBorderWidth: 2,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n        plugins: {      \r\n      legend: {\r\n        display: false,\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Суточная температура, °C',\r\n        font: {\r\n          size: 20,\r\n        },\r\n        color: 'white',\r\n      },   \r\n    },\r\n     scales: {\r\n    xAxis: {\r\n         ticks: { color: \"white\" },\r\n         grid: {display: false}\r\n       },\r\n       yAxis: {\r\n        ticks: {color: \"white\"},\r\n        grid: {display: false}\r\n      }\r\n  }\r\n  };\r\n\r\n  return (\r\n    <Line width={160} height={50} options={options} data={lineChartData} />\r\n  );\r\n};\r\nexport default ChartTemp;\r\n\r\nChartTemp.propTypes = {\r\n  value: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n","import {useNavigate} from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\n\r\nconst GoBackButton = () => {\r\n  const navigate = useNavigate();\r\n   const handleGoBack = () => {\r\n    navigate('/weather-app');\r\n  };\r\n  return (\r\n    <>\r\n<Button\r\n          variant=\"outlined\"\r\n          type=\"button\"\r\n          sx={{\r\n            color: 'white',\r\n            border: '1px solid white',\r\n            position: 'relative',\r\n            top: '15px',\r\n            left: '15px'\r\n          }}\r\n          onClick={() => { handleGoBack() }}\r\n        >Вернуться на главную</Button>\r\n   </>\r\n  );\r\n};\r\n\r\nexport default GoBackButton; ","import { toast } from 'react-toastify';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\nimport { fetchTemperature, fetchCityById } from 'api/api';\r\nimport { citiesWeatherArray } from 'redux/cityWeather/cityWeather-selectors';\r\nimport DetailICityWeatherCard from 'components/DetailICityWeatherCard';\r\nimport ChartTemperature from 'components/ChartTemperature';\r\nimport GoBackButton from 'components/GoBackButton';\r\nimport css from 'css/common.module.css';\r\n\r\nfunction DetailWeatherCity() {\r\n  const [temp, setTemp] = useState([]);\r\n  const [visible, setVisible] = useState(true);\r\n  const weatherCitiesFromRedux = useSelector(citiesWeatherArray);\r\n  const [allCitiesWeather, setAllCitiesWeather] = useState([]);\r\n  const { cityId } = useParams();\r\n\r\n  console.log(temp);\r\n  // Запрос на погоду города по ID при загрузке страницы не из главной\r\n  useEffect(() => {\r\n    if (weatherCitiesFromRedux.length === 0 && allCitiesWeather.length === 0)\r\n      fetchCityById(cityId)\r\n        .then(data => setAllCitiesWeather([data, ...allCitiesWeather]))\r\n        .catch(error => toast.error(error.message));\r\n  }, [allCitiesWeather, cityId, weatherCitiesFromRedux.length]);\r\n\r\n  const city =\r\n    weatherCitiesFromRedux.length !== 0\r\n      ? weatherCitiesFromRedux.find(({ id }) => id === Number(cityId))\r\n      : allCitiesWeather[0];\r\n\r\n  // Запрос на получение значений температуры по координатам города\r\n  const detailTemp = ({ coord: { lat, lon } }) => {\r\n    fetchTemperature(lat, lon)\r\n      .then(setTemp)\r\n      .catch(error => toast.error(error.message));\r\n  };\r\n\r\n  // Получение значений температуры по координатам города за 24 часа\r\n  const tempOfDayArray = temp.length !== 0 ? temp.hourly.slice(0, 24) : [];\r\n\r\n  return (\r\n    <>\r\n      <GoBackButton />\r\n      <div className={css.wrapper}>\r\n        {city && city.length !== 0 && <DetailICityWeatherCard city={city} />}\r\n        {visible && (\r\n          <Button\r\n            variant=\"outlined\"\r\n            type=\"button\"\r\n            sx={{\r\n              color: 'white',\r\n              border: '1px solid white',\r\n              mt: '10px',\r\n            }}\r\n            onClick={() => {\r\n              detailTemp(city);\r\n              setVisible(!visible);\r\n            }}\r\n          >\r\n            Подробный прогноз температуры (°C)\r\n          </Button>\r\n        )}\r\n      </div>\r\n      {!visible && <ChartTemperature value={tempOfDayArray} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DetailWeatherCity;\r\n","import { Routes, Route } from 'react-router-dom';\nimport './App.css';\nimport HomeView from './views/HomeView';\nimport DetailWeatherView from './views/DetailWeatherView';\n\nfunction App() {\n  return (\n    <Routes>\n      <Route exact path=\"/\" element={<HomeView />}></Route>\n      <Route path=\"/:cityId\" element={<DetailWeatherView />}></Route>\n    </Routes>\n  );\n}\n\nexport default App;\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  fetchOneCityWeather,\r\n  fetchUpdateWeatherOneCity,\r\n  fetchCityWeatherFromLocalStorage,\r\n} from './cityWeather-operations';\r\nimport { remove } from './cityWeather-actions';\r\n\r\nconst entities = createReducer([], {\r\n  [fetchOneCityWeather.fulfilled]: (state, { payload }) => [payload, ...state],\r\n  [fetchUpdateWeatherOneCity.fulfilled]: (state, { payload }) =>\r\n    state.reduce((acc, city) => {\r\n      city.id !== payload.id ? acc.push(city) : acc.push(payload);\r\n      return acc;\r\n    }, []),\r\n  [fetchCityWeatherFromLocalStorage.fulfilled]: (_, { payload }) => payload,\r\n  [remove]: (state, { payload }) => state.filter(city => city.id !== payload),\r\n});\r\n\r\nconst isLoading = createReducer(false, {\r\n  [fetchOneCityWeather.pending]: () => true,\r\n  [fetchOneCityWeather.fulfilled]: () => false,\r\n  [fetchOneCityWeather.rejected]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchOneCityWeather.rejected]: (_, { payload }) => toast.error(payload),\r\n  [fetchUpdateWeatherOneCity.rejected]: (_, { payload }) => payload,\r\n  [fetchCityWeatherFromLocalStorage.rejected]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  entities,\r\n  isLoading,\r\n  error,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport citiesWeatherReducer from './cityWeather/cityWeather-reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    citiesWeather: citiesWeatherReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport store from 'redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}